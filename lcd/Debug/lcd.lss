
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000c28  00000c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000114c  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dcd  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002bd1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002be4  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  0000314e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00003635  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  0000364f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <main>
  7a:	0c 94 12 06 	jmp	0xc24	; 0xc24 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_init>:
 *      Author: hesham
 */
#include"lcd.h"

void LCD_init(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
DDRD |=(1<<4)|(1<<5)|(1<<6);
  8a:	81 e3       	ldi	r24, 0x31	; 49
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	21 e3       	ldi	r18, 0x31	; 49
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	20 81       	ld	r18, Z
  96:	20 67       	ori	r18, 0x70	; 112
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
DDRC=0XFF;
  9c:	84 e3       	ldi	r24, 0x34	; 52
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
LCD_sendCommand(0x38);
  a6:	88 e3       	ldi	r24, 0x38	; 56
  a8:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendCommand>
LCD_sendCommand(0x0c);
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendCommand>
LCD_sendCommand(0x01);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendCommand>

}
  b8:	00 00       	nop
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	e9 97       	sbiw	r28, 0x39	; 57
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	89 af       	std	Y+57, r24	; 0x39
//rs=0
CLEAR_BIT(PORTD,4);
  d6:	82 e3       	ldi	r24, 0x32	; 50
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	22 e3       	ldi	r18, 0x32	; 50
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	20 81       	ld	r18, Z
  e2:	2f 7e       	andi	r18, 0xEF	; 239
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
//r/w =0
CLEAR_BIT(PORTD,5);
  e8:	82 e3       	ldi	r24, 0x32	; 50
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	22 e3       	ldi	r18, 0x32	; 50
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	2f 7d       	andi	r18, 0xDF	; 223
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a0 e8       	ldi	r26, 0x80	; 128
 100:	bf e3       	ldi	r27, 0x3F	; 63
 102:	89 83       	std	Y+1, r24	; 0x01
 104:	9a 83       	std	Y+2, r25	; 0x02
 106:	ab 83       	std	Y+3, r26	; 0x03
 108:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	4a e7       	ldi	r20, 0x7A	; 122
 110:	53 e4       	ldi	r21, 0x43	; 67
 112:	69 81       	ldd	r22, Y+1	; 0x01
 114:	7a 81       	ldd	r23, Y+2	; 0x02
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	9c 81       	ldd	r25, Y+4	; 0x04
 11a:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	8f a7       	std	Y+47, r24	; 0x2f
 124:	98 ab       	std	Y+48, r25	; 0x30
 126:	a9 ab       	std	Y+49, r26	; 0x31
 128:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	40 e8       	ldi	r20, 0x80	; 128
 130:	5f e3       	ldi	r21, 0x3F	; 63
 132:	6f a5       	ldd	r22, Y+47	; 0x2f
 134:	78 a9       	ldd	r23, Y+48	; 0x30
 136:	89 a9       	ldd	r24, Y+49	; 0x31
 138:	9a a9       	ldd	r25, Y+50	; 0x32
 13a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__cmpsf2>
 13e:	88 23       	and	r24, r24
 140:	2c f4       	brge	.+10     	; 0x14c <LCD_sendCommand+0x8c>
		__ticks = 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	9c ab       	std	Y+52, r25	; 0x34
 148:	8b ab       	std	Y+51, r24	; 0x33
 14a:	3f c0       	rjmp	.+126    	; 0x1ca <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	3f ef       	ldi	r19, 0xFF	; 255
 150:	4f e7       	ldi	r20, 0x7F	; 127
 152:	57 e4       	ldi	r21, 0x47	; 71
 154:	6f a5       	ldd	r22, Y+47	; 0x2f
 156:	78 a9       	ldd	r23, Y+48	; 0x30
 158:	89 a9       	ldd	r24, Y+49	; 0x31
 15a:	9a a9       	ldd	r25, Y+50	; 0x32
 15c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__gesf2>
 160:	18 16       	cp	r1, r24
 162:	4c f5       	brge	.+82     	; 0x1b6 <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e2       	ldi	r20, 0x20	; 32
 16a:	51 e4       	ldi	r21, 0x41	; 65
 16c:	69 81       	ldd	r22, Y+1	; 0x01
 16e:	7a 81       	ldd	r23, Y+2	; 0x02
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	9c 81       	ldd	r25, Y+4	; 0x04
 174:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
 17c:	bc 01       	movw	r22, r24
 17e:	cd 01       	movw	r24, r26
 180:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 184:	dc 01       	movw	r26, r24
 186:	cb 01       	movw	r24, r22
 188:	9c ab       	std	Y+52, r25	; 0x34
 18a:	8b ab       	std	Y+51, r24	; 0x33
 18c:	0f c0       	rjmp	.+30     	; 0x1ac <LCD_sendCommand+0xec>
 18e:	89 e1       	ldi	r24, 0x19	; 25
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9e ab       	std	Y+54, r25	; 0x36
 194:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 196:	8d a9       	ldd	r24, Y+53	; 0x35
 198:	9e a9       	ldd	r25, Y+54	; 0x36
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_sendCommand+0xda>
 19e:	9e ab       	std	Y+54, r25	; 0x36
 1a0:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a2:	8b a9       	ldd	r24, Y+51	; 0x33
 1a4:	9c a9       	ldd	r25, Y+52	; 0x34
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	9c ab       	std	Y+52, r25	; 0x34
 1aa:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ac:	8b a9       	ldd	r24, Y+51	; 0x33
 1ae:	9c a9       	ldd	r25, Y+52	; 0x34
 1b0:	89 2b       	or	r24, r25
 1b2:	69 f7       	brne	.-38     	; 0x18e <LCD_sendCommand+0xce>
 1b4:	14 c0       	rjmp	.+40     	; 0x1de <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1b6:	6f a5       	ldd	r22, Y+47	; 0x2f
 1b8:	78 a9       	ldd	r23, Y+48	; 0x30
 1ba:	89 a9       	ldd	r24, Y+49	; 0x31
 1bc:	9a a9       	ldd	r25, Y+50	; 0x32
 1be:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 1c2:	dc 01       	movw	r26, r24
 1c4:	cb 01       	movw	r24, r22
 1c6:	9c ab       	std	Y+52, r25	; 0x34
 1c8:	8b ab       	std	Y+51, r24	; 0x33
 1ca:	8b a9       	ldd	r24, Y+51	; 0x33
 1cc:	9c a9       	ldd	r25, Y+52	; 0x34
 1ce:	98 af       	std	Y+56, r25	; 0x38
 1d0:	8f ab       	std	Y+55, r24	; 0x37
 1d2:	8f a9       	ldd	r24, Y+55	; 0x37
 1d4:	98 ad       	ldd	r25, Y+56	; 0x38
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_sendCommand+0x116>
 1da:	98 af       	std	Y+56, r25	; 0x38
 1dc:	8f ab       	std	Y+55, r24	; 0x37

//delay 1
_delay_ms(1);

//E=1
SET_BIT(PORTD,6);
 1de:	82 e3       	ldi	r24, 0x32	; 50
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	22 e3       	ldi	r18, 0x32	; 50
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	f9 01       	movw	r30, r18
 1e8:	20 81       	ld	r18, Z
 1ea:	20 64       	ori	r18, 0x40	; 64
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	a0 e8       	ldi	r26, 0x80	; 128
 1f6:	bf e3       	ldi	r27, 0x3F	; 63
 1f8:	8d 83       	std	Y+5, r24	; 0x05
 1fa:	9e 83       	std	Y+6, r25	; 0x06
 1fc:	af 83       	std	Y+7, r26	; 0x07
 1fe:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	4a e7       	ldi	r20, 0x7A	; 122
 206:	53 e4       	ldi	r21, 0x43	; 67
 208:	6d 81       	ldd	r22, Y+5	; 0x05
 20a:	7e 81       	ldd	r23, Y+6	; 0x06
 20c:	8f 81       	ldd	r24, Y+7	; 0x07
 20e:	98 85       	ldd	r25, Y+8	; 0x08
 210:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	8d a3       	std	Y+37, r24	; 0x25
 21a:	9e a3       	std	Y+38, r25	; 0x26
 21c:	af a3       	std	Y+39, r26	; 0x27
 21e:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e8       	ldi	r20, 0x80	; 128
 226:	5f e3       	ldi	r21, 0x3F	; 63
 228:	6d a1       	ldd	r22, Y+37	; 0x25
 22a:	7e a1       	ldd	r23, Y+38	; 0x26
 22c:	8f a1       	ldd	r24, Y+39	; 0x27
 22e:	98 a5       	ldd	r25, Y+40	; 0x28
 230:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__cmpsf2>
 234:	88 23       	and	r24, r24
 236:	2c f4       	brge	.+10     	; 0x242 <LCD_sendCommand+0x182>
		__ticks = 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	9a a7       	std	Y+42, r25	; 0x2a
 23e:	89 a7       	std	Y+41, r24	; 0x29
 240:	3f c0       	rjmp	.+126    	; 0x2c0 <LCD_sendCommand+0x200>
	else if (__tmp > 65535)
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	3f ef       	ldi	r19, 0xFF	; 255
 246:	4f e7       	ldi	r20, 0x7F	; 127
 248:	57 e4       	ldi	r21, 0x47	; 71
 24a:	6d a1       	ldd	r22, Y+37	; 0x25
 24c:	7e a1       	ldd	r23, Y+38	; 0x26
 24e:	8f a1       	ldd	r24, Y+39	; 0x27
 250:	98 a5       	ldd	r25, Y+40	; 0x28
 252:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__gesf2>
 256:	18 16       	cp	r1, r24
 258:	4c f5       	brge	.+82     	; 0x2ac <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	40 e2       	ldi	r20, 0x20	; 32
 260:	51 e4       	ldi	r21, 0x41	; 65
 262:	6d 81       	ldd	r22, Y+5	; 0x05
 264:	7e 81       	ldd	r23, Y+6	; 0x06
 266:	8f 81       	ldd	r24, Y+7	; 0x07
 268:	98 85       	ldd	r25, Y+8	; 0x08
 26a:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 26e:	dc 01       	movw	r26, r24
 270:	cb 01       	movw	r24, r22
 272:	bc 01       	movw	r22, r24
 274:	cd 01       	movw	r24, r26
 276:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	9a a7       	std	Y+42, r25	; 0x2a
 280:	89 a7       	std	Y+41, r24	; 0x29
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <LCD_sendCommand+0x1e2>
 284:	89 e1       	ldi	r24, 0x19	; 25
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	9c a7       	std	Y+44, r25	; 0x2c
 28a:	8b a7       	std	Y+43, r24	; 0x2b
 28c:	8b a5       	ldd	r24, Y+43	; 0x2b
 28e:	9c a5       	ldd	r25, Y+44	; 0x2c
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_sendCommand+0x1d0>
 294:	9c a7       	std	Y+44, r25	; 0x2c
 296:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 298:	89 a5       	ldd	r24, Y+41	; 0x29
 29a:	9a a5       	ldd	r25, Y+42	; 0x2a
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	9a a7       	std	Y+42, r25	; 0x2a
 2a0:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a2:	89 a5       	ldd	r24, Y+41	; 0x29
 2a4:	9a a5       	ldd	r25, Y+42	; 0x2a
 2a6:	89 2b       	or	r24, r25
 2a8:	69 f7       	brne	.-38     	; 0x284 <LCD_sendCommand+0x1c4>
 2aa:	14 c0       	rjmp	.+40     	; 0x2d4 <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2ac:	6d a1       	ldd	r22, Y+37	; 0x25
 2ae:	7e a1       	ldd	r23, Y+38	; 0x26
 2b0:	8f a1       	ldd	r24, Y+39	; 0x27
 2b2:	98 a5       	ldd	r25, Y+40	; 0x28
 2b4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 2b8:	dc 01       	movw	r26, r24
 2ba:	cb 01       	movw	r24, r22
 2bc:	9a a7       	std	Y+42, r25	; 0x2a
 2be:	89 a7       	std	Y+41, r24	; 0x29
 2c0:	89 a5       	ldd	r24, Y+41	; 0x29
 2c2:	9a a5       	ldd	r25, Y+42	; 0x2a
 2c4:	9e a7       	std	Y+46, r25	; 0x2e
 2c6:	8d a7       	std	Y+45, r24	; 0x2d
 2c8:	8d a5       	ldd	r24, Y+45	; 0x2d
 2ca:	9e a5       	ldd	r25, Y+46	; 0x2e
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_sendCommand+0x20c>
 2d0:	9e a7       	std	Y+46, r25	; 0x2e
 2d2:	8d a7       	std	Y+45, r24	; 0x2d

//delay 1
_delay_ms(1);
//portc=command
PORTC=command;
 2d4:	85 e3       	ldi	r24, 0x35	; 53
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	29 ad       	ldd	r18, Y+57	; 0x39
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	a0 e8       	ldi	r26, 0x80	; 128
 2e4:	bf e3       	ldi	r27, 0x3F	; 63
 2e6:	89 87       	std	Y+9, r24	; 0x09
 2e8:	9a 87       	std	Y+10, r25	; 0x0a
 2ea:	ab 87       	std	Y+11, r26	; 0x0b
 2ec:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	4a e7       	ldi	r20, 0x7A	; 122
 2f4:	53 e4       	ldi	r21, 0x43	; 67
 2f6:	69 85       	ldd	r22, Y+9	; 0x09
 2f8:	7a 85       	ldd	r23, Y+10	; 0x0a
 2fa:	8b 85       	ldd	r24, Y+11	; 0x0b
 2fc:	9c 85       	ldd	r25, Y+12	; 0x0c
 2fe:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 302:	dc 01       	movw	r26, r24
 304:	cb 01       	movw	r24, r22
 306:	8b 8f       	std	Y+27, r24	; 0x1b
 308:	9c 8f       	std	Y+28, r25	; 0x1c
 30a:	ad 8f       	std	Y+29, r26	; 0x1d
 30c:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	40 e8       	ldi	r20, 0x80	; 128
 314:	5f e3       	ldi	r21, 0x3F	; 63
 316:	6b 8d       	ldd	r22, Y+27	; 0x1b
 318:	7c 8d       	ldd	r23, Y+28	; 0x1c
 31a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 31c:	9e 8d       	ldd	r25, Y+30	; 0x1e
 31e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__cmpsf2>
 322:	88 23       	and	r24, r24
 324:	2c f4       	brge	.+10     	; 0x330 <LCD_sendCommand+0x270>
		__ticks = 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	98 a3       	std	Y+32, r25	; 0x20
 32c:	8f 8f       	std	Y+31, r24	; 0x1f
 32e:	3f c0       	rjmp	.+126    	; 0x3ae <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	3f ef       	ldi	r19, 0xFF	; 255
 334:	4f e7       	ldi	r20, 0x7F	; 127
 336:	57 e4       	ldi	r21, 0x47	; 71
 338:	6b 8d       	ldd	r22, Y+27	; 0x1b
 33a:	7c 8d       	ldd	r23, Y+28	; 0x1c
 33c:	8d 8d       	ldd	r24, Y+29	; 0x1d
 33e:	9e 8d       	ldd	r25, Y+30	; 0x1e
 340:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__gesf2>
 344:	18 16       	cp	r1, r24
 346:	4c f5       	brge	.+82     	; 0x39a <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	40 e2       	ldi	r20, 0x20	; 32
 34e:	51 e4       	ldi	r21, 0x41	; 65
 350:	69 85       	ldd	r22, Y+9	; 0x09
 352:	7a 85       	ldd	r23, Y+10	; 0x0a
 354:	8b 85       	ldd	r24, Y+11	; 0x0b
 356:	9c 85       	ldd	r25, Y+12	; 0x0c
 358:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 35c:	dc 01       	movw	r26, r24
 35e:	cb 01       	movw	r24, r22
 360:	bc 01       	movw	r22, r24
 362:	cd 01       	movw	r24, r26
 364:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 368:	dc 01       	movw	r26, r24
 36a:	cb 01       	movw	r24, r22
 36c:	98 a3       	std	Y+32, r25	; 0x20
 36e:	8f 8f       	std	Y+31, r24	; 0x1f
 370:	0f c0       	rjmp	.+30     	; 0x390 <LCD_sendCommand+0x2d0>
 372:	89 e1       	ldi	r24, 0x19	; 25
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	9a a3       	std	Y+34, r25	; 0x22
 378:	89 a3       	std	Y+33, r24	; 0x21
 37a:	89 a1       	ldd	r24, Y+33	; 0x21
 37c:	9a a1       	ldd	r25, Y+34	; 0x22
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_sendCommand+0x2be>
 382:	9a a3       	std	Y+34, r25	; 0x22
 384:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 386:	8f 8d       	ldd	r24, Y+31	; 0x1f
 388:	98 a1       	ldd	r25, Y+32	; 0x20
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	98 a3       	std	Y+32, r25	; 0x20
 38e:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 390:	8f 8d       	ldd	r24, Y+31	; 0x1f
 392:	98 a1       	ldd	r25, Y+32	; 0x20
 394:	89 2b       	or	r24, r25
 396:	69 f7       	brne	.-38     	; 0x372 <LCD_sendCommand+0x2b2>
 398:	14 c0       	rjmp	.+40     	; 0x3c2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 39a:	6b 8d       	ldd	r22, Y+27	; 0x1b
 39c:	7c 8d       	ldd	r23, Y+28	; 0x1c
 39e:	8d 8d       	ldd	r24, Y+29	; 0x1d
 3a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
 3a2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 3a6:	dc 01       	movw	r26, r24
 3a8:	cb 01       	movw	r24, r22
 3aa:	98 a3       	std	Y+32, r25	; 0x20
 3ac:	8f 8f       	std	Y+31, r24	; 0x1f
 3ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
 3b0:	98 a1       	ldd	r25, Y+32	; 0x20
 3b2:	9c a3       	std	Y+36, r25	; 0x24
 3b4:	8b a3       	std	Y+35, r24	; 0x23
 3b6:	8b a1       	ldd	r24, Y+35	; 0x23
 3b8:	9c a1       	ldd	r25, Y+36	; 0x24
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_sendCommand+0x2fa>
 3be:	9c a3       	std	Y+36, r25	; 0x24
 3c0:	8b a3       	std	Y+35, r24	; 0x23
// delay 1
_delay_ms(1);

//E=0
CLEAR_BIT(PORTD,6);
 3c2:	82 e3       	ldi	r24, 0x32	; 50
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	22 e3       	ldi	r18, 0x32	; 50
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	f9 01       	movw	r30, r18
 3cc:	20 81       	ld	r18, Z
 3ce:	2f 7b       	andi	r18, 0xBF	; 191
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	a0 e8       	ldi	r26, 0x80	; 128
 3da:	bf e3       	ldi	r27, 0x3F	; 63
 3dc:	8d 87       	std	Y+13, r24	; 0x0d
 3de:	9e 87       	std	Y+14, r25	; 0x0e
 3e0:	af 87       	std	Y+15, r26	; 0x0f
 3e2:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	4a e7       	ldi	r20, 0x7A	; 122
 3ea:	53 e4       	ldi	r21, 0x43	; 67
 3ec:	6d 85       	ldd	r22, Y+13	; 0x0d
 3ee:	7e 85       	ldd	r23, Y+14	; 0x0e
 3f0:	8f 85       	ldd	r24, Y+15	; 0x0f
 3f2:	98 89       	ldd	r25, Y+16	; 0x10
 3f4:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 3f8:	dc 01       	movw	r26, r24
 3fa:	cb 01       	movw	r24, r22
 3fc:	89 8b       	std	Y+17, r24	; 0x11
 3fe:	9a 8b       	std	Y+18, r25	; 0x12
 400:	ab 8b       	std	Y+19, r26	; 0x13
 402:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	40 e8       	ldi	r20, 0x80	; 128
 40a:	5f e3       	ldi	r21, 0x3F	; 63
 40c:	69 89       	ldd	r22, Y+17	; 0x11
 40e:	7a 89       	ldd	r23, Y+18	; 0x12
 410:	8b 89       	ldd	r24, Y+19	; 0x13
 412:	9c 89       	ldd	r25, Y+20	; 0x14
 414:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__cmpsf2>
 418:	88 23       	and	r24, r24
 41a:	2c f4       	brge	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		__ticks = 1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	9e 8b       	std	Y+22, r25	; 0x16
 422:	8d 8b       	std	Y+21, r24	; 0x15
 424:	3f c0       	rjmp	.+126    	; 0x4a4 <__stack+0x45>
	else if (__tmp > 65535)
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	3f ef       	ldi	r19, 0xFF	; 255
 42a:	4f e7       	ldi	r20, 0x7F	; 127
 42c:	57 e4       	ldi	r21, 0x47	; 71
 42e:	69 89       	ldd	r22, Y+17	; 0x11
 430:	7a 89       	ldd	r23, Y+18	; 0x12
 432:	8b 89       	ldd	r24, Y+19	; 0x13
 434:	9c 89       	ldd	r25, Y+20	; 0x14
 436:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__gesf2>
 43a:	18 16       	cp	r1, r24
 43c:	4c f5       	brge	.+82     	; 0x490 <__stack+0x31>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 e2       	ldi	r20, 0x20	; 32
 444:	51 e4       	ldi	r21, 0x41	; 65
 446:	6d 85       	ldd	r22, Y+13	; 0x0d
 448:	7e 85       	ldd	r23, Y+14	; 0x0e
 44a:	8f 85       	ldd	r24, Y+15	; 0x0f
 44c:	98 89       	ldd	r25, Y+16	; 0x10
 44e:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 452:	dc 01       	movw	r26, r24
 454:	cb 01       	movw	r24, r22
 456:	bc 01       	movw	r22, r24
 458:	cd 01       	movw	r24, r26
 45a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 45e:	dc 01       	movw	r26, r24
 460:	cb 01       	movw	r24, r22
 462:	9e 8b       	std	Y+22, r25	; 0x16
 464:	8d 8b       	std	Y+21, r24	; 0x15
 466:	0f c0       	rjmp	.+30     	; 0x486 <__stack+0x27>
 468:	89 e1       	ldi	r24, 0x19	; 25
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	98 8f       	std	Y+24, r25	; 0x18
 46e:	8f 8b       	std	Y+23, r24	; 0x17
 470:	8f 89       	ldd	r24, Y+23	; 0x17
 472:	98 8d       	ldd	r25, Y+24	; 0x18
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__stack+0x15>
 478:	98 8f       	std	Y+24, r25	; 0x18
 47a:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 47c:	8d 89       	ldd	r24, Y+21	; 0x15
 47e:	9e 89       	ldd	r25, Y+22	; 0x16
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	9e 8b       	std	Y+22, r25	; 0x16
 484:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 486:	8d 89       	ldd	r24, Y+21	; 0x15
 488:	9e 89       	ldd	r25, Y+22	; 0x16
 48a:	89 2b       	or	r24, r25
 48c:	69 f7       	brne	.-38     	; 0x468 <__stack+0x9>

//delay 1
_delay_ms(1);

}
 48e:	14 c0       	rjmp	.+40     	; 0x4b8 <__stack+0x59>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 490:	69 89       	ldd	r22, Y+17	; 0x11
 492:	7a 89       	ldd	r23, Y+18	; 0x12
 494:	8b 89       	ldd	r24, Y+19	; 0x13
 496:	9c 89       	ldd	r25, Y+20	; 0x14
 498:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 49c:	dc 01       	movw	r26, r24
 49e:	cb 01       	movw	r24, r22
 4a0:	9e 8b       	std	Y+22, r25	; 0x16
 4a2:	8d 8b       	std	Y+21, r24	; 0x15
 4a4:	8d 89       	ldd	r24, Y+21	; 0x15
 4a6:	9e 89       	ldd	r25, Y+22	; 0x16
 4a8:	9a 8f       	std	Y+26, r25	; 0x1a
 4aa:	89 8f       	std	Y+25, r24	; 0x19
 4ac:	89 8d       	ldd	r24, Y+25	; 0x19
 4ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__stack+0x51>
 4b4:	9a 8f       	std	Y+26, r25	; 0x1a
 4b6:	89 8f       	std	Y+25, r24	; 0x19
 4b8:	00 00       	nop
 4ba:	e9 96       	adiw	r28, 0x39	; 57
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	e9 97       	sbiw	r28, 0x39	; 57
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
 4e0:	89 af       	std	Y+57, r24	; 0x39
	//rs=1
	SET_BIT(PORTD,4);
 4e2:	82 e3       	ldi	r24, 0x32	; 50
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	22 e3       	ldi	r18, 0x32	; 50
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	f9 01       	movw	r30, r18
 4ec:	20 81       	ld	r18, Z
 4ee:	20 61       	ori	r18, 0x10	; 16
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
	//r/w =0
	CLEAR_BIT(PORTD,5);
 4f4:	82 e3       	ldi	r24, 0x32	; 50
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	22 e3       	ldi	r18, 0x32	; 50
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	f9 01       	movw	r30, r18
 4fe:	20 81       	ld	r18, Z
 500:	2f 7d       	andi	r18, 0xDF	; 223
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	a0 e8       	ldi	r26, 0x80	; 128
 50c:	bf e3       	ldi	r27, 0x3F	; 63
 50e:	89 83       	std	Y+1, r24	; 0x01
 510:	9a 83       	std	Y+2, r25	; 0x02
 512:	ab 83       	std	Y+3, r26	; 0x03
 514:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	4a e7       	ldi	r20, 0x7A	; 122
 51c:	53 e4       	ldi	r21, 0x43	; 67
 51e:	69 81       	ldd	r22, Y+1	; 0x01
 520:	7a 81       	ldd	r23, Y+2	; 0x02
 522:	8b 81       	ldd	r24, Y+3	; 0x03
 524:	9c 81       	ldd	r25, Y+4	; 0x04
 526:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 52a:	dc 01       	movw	r26, r24
 52c:	cb 01       	movw	r24, r22
 52e:	8f a7       	std	Y+47, r24	; 0x2f
 530:	98 ab       	std	Y+48, r25	; 0x30
 532:	a9 ab       	std	Y+49, r26	; 0x31
 534:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	40 e8       	ldi	r20, 0x80	; 128
 53c:	5f e3       	ldi	r21, 0x3F	; 63
 53e:	6f a5       	ldd	r22, Y+47	; 0x2f
 540:	78 a9       	ldd	r23, Y+48	; 0x30
 542:	89 a9       	ldd	r24, Y+49	; 0x31
 544:	9a a9       	ldd	r25, Y+50	; 0x32
 546:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__cmpsf2>
 54a:	88 23       	and	r24, r24
 54c:	2c f4       	brge	.+10     	; 0x558 <LCD_displayCharacter+0x8c>
		__ticks = 1;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	9c ab       	std	Y+52, r25	; 0x34
 554:	8b ab       	std	Y+51, r24	; 0x33
 556:	3f c0       	rjmp	.+126    	; 0x5d6 <LCD_displayCharacter+0x10a>
	else if (__tmp > 65535)
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	3f ef       	ldi	r19, 0xFF	; 255
 55c:	4f e7       	ldi	r20, 0x7F	; 127
 55e:	57 e4       	ldi	r21, 0x47	; 71
 560:	6f a5       	ldd	r22, Y+47	; 0x2f
 562:	78 a9       	ldd	r23, Y+48	; 0x30
 564:	89 a9       	ldd	r24, Y+49	; 0x31
 566:	9a a9       	ldd	r25, Y+50	; 0x32
 568:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__gesf2>
 56c:	18 16       	cp	r1, r24
 56e:	4c f5       	brge	.+82     	; 0x5c2 <LCD_displayCharacter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	40 e2       	ldi	r20, 0x20	; 32
 576:	51 e4       	ldi	r21, 0x41	; 65
 578:	69 81       	ldd	r22, Y+1	; 0x01
 57a:	7a 81       	ldd	r23, Y+2	; 0x02
 57c:	8b 81       	ldd	r24, Y+3	; 0x03
 57e:	9c 81       	ldd	r25, Y+4	; 0x04
 580:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 584:	dc 01       	movw	r26, r24
 586:	cb 01       	movw	r24, r22
 588:	bc 01       	movw	r22, r24
 58a:	cd 01       	movw	r24, r26
 58c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 590:	dc 01       	movw	r26, r24
 592:	cb 01       	movw	r24, r22
 594:	9c ab       	std	Y+52, r25	; 0x34
 596:	8b ab       	std	Y+51, r24	; 0x33
 598:	0f c0       	rjmp	.+30     	; 0x5b8 <LCD_displayCharacter+0xec>
 59a:	89 e1       	ldi	r24, 0x19	; 25
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	9e ab       	std	Y+54, r25	; 0x36
 5a0:	8d ab       	std	Y+53, r24	; 0x35
 5a2:	8d a9       	ldd	r24, Y+53	; 0x35
 5a4:	9e a9       	ldd	r25, Y+54	; 0x36
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <LCD_displayCharacter+0xda>
 5aa:	9e ab       	std	Y+54, r25	; 0x36
 5ac:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ae:	8b a9       	ldd	r24, Y+51	; 0x33
 5b0:	9c a9       	ldd	r25, Y+52	; 0x34
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	9c ab       	std	Y+52, r25	; 0x34
 5b6:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5b8:	8b a9       	ldd	r24, Y+51	; 0x33
 5ba:	9c a9       	ldd	r25, Y+52	; 0x34
 5bc:	89 2b       	or	r24, r25
 5be:	69 f7       	brne	.-38     	; 0x59a <LCD_displayCharacter+0xce>
 5c0:	14 c0       	rjmp	.+40     	; 0x5ea <LCD_displayCharacter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5c2:	6f a5       	ldd	r22, Y+47	; 0x2f
 5c4:	78 a9       	ldd	r23, Y+48	; 0x30
 5c6:	89 a9       	ldd	r24, Y+49	; 0x31
 5c8:	9a a9       	ldd	r25, Y+50	; 0x32
 5ca:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 5ce:	dc 01       	movw	r26, r24
 5d0:	cb 01       	movw	r24, r22
 5d2:	9c ab       	std	Y+52, r25	; 0x34
 5d4:	8b ab       	std	Y+51, r24	; 0x33
 5d6:	8b a9       	ldd	r24, Y+51	; 0x33
 5d8:	9c a9       	ldd	r25, Y+52	; 0x34
 5da:	98 af       	std	Y+56, r25	; 0x38
 5dc:	8f ab       	std	Y+55, r24	; 0x37
 5de:	8f a9       	ldd	r24, Y+55	; 0x37
 5e0:	98 ad       	ldd	r25, Y+56	; 0x38
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <LCD_displayCharacter+0x116>
 5e6:	98 af       	std	Y+56, r25	; 0x38
 5e8:	8f ab       	std	Y+55, r24	; 0x37

	//delay 1
	_delay_ms(1);

	//E=1
	SET_BIT(PORTD,6);
 5ea:	82 e3       	ldi	r24, 0x32	; 50
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	22 e3       	ldi	r18, 0x32	; 50
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	f9 01       	movw	r30, r18
 5f4:	20 81       	ld	r18, Z
 5f6:	20 64       	ori	r18, 0x40	; 64
 5f8:	fc 01       	movw	r30, r24
 5fa:	20 83       	st	Z, r18
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	a0 e8       	ldi	r26, 0x80	; 128
 602:	bf e3       	ldi	r27, 0x3F	; 63
 604:	8d 83       	std	Y+5, r24	; 0x05
 606:	9e 83       	std	Y+6, r25	; 0x06
 608:	af 83       	std	Y+7, r26	; 0x07
 60a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 60c:	20 e0       	ldi	r18, 0x00	; 0
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	4a e7       	ldi	r20, 0x7A	; 122
 612:	53 e4       	ldi	r21, 0x43	; 67
 614:	6d 81       	ldd	r22, Y+5	; 0x05
 616:	7e 81       	ldd	r23, Y+6	; 0x06
 618:	8f 81       	ldd	r24, Y+7	; 0x07
 61a:	98 85       	ldd	r25, Y+8	; 0x08
 61c:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 620:	dc 01       	movw	r26, r24
 622:	cb 01       	movw	r24, r22
 624:	8d a3       	std	Y+37, r24	; 0x25
 626:	9e a3       	std	Y+38, r25	; 0x26
 628:	af a3       	std	Y+39, r26	; 0x27
 62a:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 62c:	20 e0       	ldi	r18, 0x00	; 0
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	40 e8       	ldi	r20, 0x80	; 128
 632:	5f e3       	ldi	r21, 0x3F	; 63
 634:	6d a1       	ldd	r22, Y+37	; 0x25
 636:	7e a1       	ldd	r23, Y+38	; 0x26
 638:	8f a1       	ldd	r24, Y+39	; 0x27
 63a:	98 a5       	ldd	r25, Y+40	; 0x28
 63c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__cmpsf2>
 640:	88 23       	and	r24, r24
 642:	2c f4       	brge	.+10     	; 0x64e <LCD_displayCharacter+0x182>
		__ticks = 1;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	9a a7       	std	Y+42, r25	; 0x2a
 64a:	89 a7       	std	Y+41, r24	; 0x29
 64c:	3f c0       	rjmp	.+126    	; 0x6cc <LCD_displayCharacter+0x200>
	else if (__tmp > 65535)
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	3f ef       	ldi	r19, 0xFF	; 255
 652:	4f e7       	ldi	r20, 0x7F	; 127
 654:	57 e4       	ldi	r21, 0x47	; 71
 656:	6d a1       	ldd	r22, Y+37	; 0x25
 658:	7e a1       	ldd	r23, Y+38	; 0x26
 65a:	8f a1       	ldd	r24, Y+39	; 0x27
 65c:	98 a5       	ldd	r25, Y+40	; 0x28
 65e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__gesf2>
 662:	18 16       	cp	r1, r24
 664:	4c f5       	brge	.+82     	; 0x6b8 <LCD_displayCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	40 e2       	ldi	r20, 0x20	; 32
 66c:	51 e4       	ldi	r21, 0x41	; 65
 66e:	6d 81       	ldd	r22, Y+5	; 0x05
 670:	7e 81       	ldd	r23, Y+6	; 0x06
 672:	8f 81       	ldd	r24, Y+7	; 0x07
 674:	98 85       	ldd	r25, Y+8	; 0x08
 676:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 67a:	dc 01       	movw	r26, r24
 67c:	cb 01       	movw	r24, r22
 67e:	bc 01       	movw	r22, r24
 680:	cd 01       	movw	r24, r26
 682:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 686:	dc 01       	movw	r26, r24
 688:	cb 01       	movw	r24, r22
 68a:	9a a7       	std	Y+42, r25	; 0x2a
 68c:	89 a7       	std	Y+41, r24	; 0x29
 68e:	0f c0       	rjmp	.+30     	; 0x6ae <LCD_displayCharacter+0x1e2>
 690:	89 e1       	ldi	r24, 0x19	; 25
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	9c a7       	std	Y+44, r25	; 0x2c
 696:	8b a7       	std	Y+43, r24	; 0x2b
 698:	8b a5       	ldd	r24, Y+43	; 0x2b
 69a:	9c a5       	ldd	r25, Y+44	; 0x2c
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <LCD_displayCharacter+0x1d0>
 6a0:	9c a7       	std	Y+44, r25	; 0x2c
 6a2:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6a4:	89 a5       	ldd	r24, Y+41	; 0x29
 6a6:	9a a5       	ldd	r25, Y+42	; 0x2a
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	9a a7       	std	Y+42, r25	; 0x2a
 6ac:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6ae:	89 a5       	ldd	r24, Y+41	; 0x29
 6b0:	9a a5       	ldd	r25, Y+42	; 0x2a
 6b2:	89 2b       	or	r24, r25
 6b4:	69 f7       	brne	.-38     	; 0x690 <LCD_displayCharacter+0x1c4>
 6b6:	14 c0       	rjmp	.+40     	; 0x6e0 <LCD_displayCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6b8:	6d a1       	ldd	r22, Y+37	; 0x25
 6ba:	7e a1       	ldd	r23, Y+38	; 0x26
 6bc:	8f a1       	ldd	r24, Y+39	; 0x27
 6be:	98 a5       	ldd	r25, Y+40	; 0x28
 6c0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 6c4:	dc 01       	movw	r26, r24
 6c6:	cb 01       	movw	r24, r22
 6c8:	9a a7       	std	Y+42, r25	; 0x2a
 6ca:	89 a7       	std	Y+41, r24	; 0x29
 6cc:	89 a5       	ldd	r24, Y+41	; 0x29
 6ce:	9a a5       	ldd	r25, Y+42	; 0x2a
 6d0:	9e a7       	std	Y+46, r25	; 0x2e
 6d2:	8d a7       	std	Y+45, r24	; 0x2d
 6d4:	8d a5       	ldd	r24, Y+45	; 0x2d
 6d6:	9e a5       	ldd	r25, Y+46	; 0x2e
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <LCD_displayCharacter+0x20c>
 6dc:	9e a7       	std	Y+46, r25	; 0x2e
 6de:	8d a7       	std	Y+45, r24	; 0x2d

	//delay 1
	_delay_ms(1);
	//portc=command
	PORTC=data;
 6e0:	85 e3       	ldi	r24, 0x35	; 53
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	29 ad       	ldd	r18, Y+57	; 0x39
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	a0 e8       	ldi	r26, 0x80	; 128
 6f0:	bf e3       	ldi	r27, 0x3F	; 63
 6f2:	89 87       	std	Y+9, r24	; 0x09
 6f4:	9a 87       	std	Y+10, r25	; 0x0a
 6f6:	ab 87       	std	Y+11, r26	; 0x0b
 6f8:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	4a e7       	ldi	r20, 0x7A	; 122
 700:	53 e4       	ldi	r21, 0x43	; 67
 702:	69 85       	ldd	r22, Y+9	; 0x09
 704:	7a 85       	ldd	r23, Y+10	; 0x0a
 706:	8b 85       	ldd	r24, Y+11	; 0x0b
 708:	9c 85       	ldd	r25, Y+12	; 0x0c
 70a:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 70e:	dc 01       	movw	r26, r24
 710:	cb 01       	movw	r24, r22
 712:	8b 8f       	std	Y+27, r24	; 0x1b
 714:	9c 8f       	std	Y+28, r25	; 0x1c
 716:	ad 8f       	std	Y+29, r26	; 0x1d
 718:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 71a:	20 e0       	ldi	r18, 0x00	; 0
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	40 e8       	ldi	r20, 0x80	; 128
 720:	5f e3       	ldi	r21, 0x3F	; 63
 722:	6b 8d       	ldd	r22, Y+27	; 0x1b
 724:	7c 8d       	ldd	r23, Y+28	; 0x1c
 726:	8d 8d       	ldd	r24, Y+29	; 0x1d
 728:	9e 8d       	ldd	r25, Y+30	; 0x1e
 72a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__cmpsf2>
 72e:	88 23       	and	r24, r24
 730:	2c f4       	brge	.+10     	; 0x73c <LCD_displayCharacter+0x270>
		__ticks = 1;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	98 a3       	std	Y+32, r25	; 0x20
 738:	8f 8f       	std	Y+31, r24	; 0x1f
 73a:	3f c0       	rjmp	.+126    	; 0x7ba <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	3f ef       	ldi	r19, 0xFF	; 255
 740:	4f e7       	ldi	r20, 0x7F	; 127
 742:	57 e4       	ldi	r21, 0x47	; 71
 744:	6b 8d       	ldd	r22, Y+27	; 0x1b
 746:	7c 8d       	ldd	r23, Y+28	; 0x1c
 748:	8d 8d       	ldd	r24, Y+29	; 0x1d
 74a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 74c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__gesf2>
 750:	18 16       	cp	r1, r24
 752:	4c f5       	brge	.+82     	; 0x7a6 <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	40 e2       	ldi	r20, 0x20	; 32
 75a:	51 e4       	ldi	r21, 0x41	; 65
 75c:	69 85       	ldd	r22, Y+9	; 0x09
 75e:	7a 85       	ldd	r23, Y+10	; 0x0a
 760:	8b 85       	ldd	r24, Y+11	; 0x0b
 762:	9c 85       	ldd	r25, Y+12	; 0x0c
 764:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 768:	dc 01       	movw	r26, r24
 76a:	cb 01       	movw	r24, r22
 76c:	bc 01       	movw	r22, r24
 76e:	cd 01       	movw	r24, r26
 770:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 774:	dc 01       	movw	r26, r24
 776:	cb 01       	movw	r24, r22
 778:	98 a3       	std	Y+32, r25	; 0x20
 77a:	8f 8f       	std	Y+31, r24	; 0x1f
 77c:	0f c0       	rjmp	.+30     	; 0x79c <LCD_displayCharacter+0x2d0>
 77e:	89 e1       	ldi	r24, 0x19	; 25
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	9a a3       	std	Y+34, r25	; 0x22
 784:	89 a3       	std	Y+33, r24	; 0x21
 786:	89 a1       	ldd	r24, Y+33	; 0x21
 788:	9a a1       	ldd	r25, Y+34	; 0x22
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	f1 f7       	brne	.-4      	; 0x78a <LCD_displayCharacter+0x2be>
 78e:	9a a3       	std	Y+34, r25	; 0x22
 790:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 792:	8f 8d       	ldd	r24, Y+31	; 0x1f
 794:	98 a1       	ldd	r25, Y+32	; 0x20
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	98 a3       	std	Y+32, r25	; 0x20
 79a:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 79c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 79e:	98 a1       	ldd	r25, Y+32	; 0x20
 7a0:	89 2b       	or	r24, r25
 7a2:	69 f7       	brne	.-38     	; 0x77e <LCD_displayCharacter+0x2b2>
 7a4:	14 c0       	rjmp	.+40     	; 0x7ce <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7a6:	6b 8d       	ldd	r22, Y+27	; 0x1b
 7a8:	7c 8d       	ldd	r23, Y+28	; 0x1c
 7aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
 7ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
 7ae:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 7b2:	dc 01       	movw	r26, r24
 7b4:	cb 01       	movw	r24, r22
 7b6:	98 a3       	std	Y+32, r25	; 0x20
 7b8:	8f 8f       	std	Y+31, r24	; 0x1f
 7ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
 7bc:	98 a1       	ldd	r25, Y+32	; 0x20
 7be:	9c a3       	std	Y+36, r25	; 0x24
 7c0:	8b a3       	std	Y+35, r24	; 0x23
 7c2:	8b a1       	ldd	r24, Y+35	; 0x23
 7c4:	9c a1       	ldd	r25, Y+36	; 0x24
 7c6:	01 97       	sbiw	r24, 0x01	; 1
 7c8:	f1 f7       	brne	.-4      	; 0x7c6 <LCD_displayCharacter+0x2fa>
 7ca:	9c a3       	std	Y+36, r25	; 0x24
 7cc:	8b a3       	std	Y+35, r24	; 0x23
	// delay 1
	_delay_ms(1);

	//E=0
	CLEAR_BIT(PORTD,6);
 7ce:	82 e3       	ldi	r24, 0x32	; 50
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	22 e3       	ldi	r18, 0x32	; 50
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	f9 01       	movw	r30, r18
 7d8:	20 81       	ld	r18, Z
 7da:	2f 7b       	andi	r18, 0xBF	; 191
 7dc:	fc 01       	movw	r30, r24
 7de:	20 83       	st	Z, r18
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	a0 e8       	ldi	r26, 0x80	; 128
 7e6:	bf e3       	ldi	r27, 0x3F	; 63
 7e8:	8d 87       	std	Y+13, r24	; 0x0d
 7ea:	9e 87       	std	Y+14, r25	; 0x0e
 7ec:	af 87       	std	Y+15, r26	; 0x0f
 7ee:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7f0:	20 e0       	ldi	r18, 0x00	; 0
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	4a e7       	ldi	r20, 0x7A	; 122
 7f6:	53 e4       	ldi	r21, 0x43	; 67
 7f8:	6d 85       	ldd	r22, Y+13	; 0x0d
 7fa:	7e 85       	ldd	r23, Y+14	; 0x0e
 7fc:	8f 85       	ldd	r24, Y+15	; 0x0f
 7fe:	98 89       	ldd	r25, Y+16	; 0x10
 800:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 804:	dc 01       	movw	r26, r24
 806:	cb 01       	movw	r24, r22
 808:	89 8b       	std	Y+17, r24	; 0x11
 80a:	9a 8b       	std	Y+18, r25	; 0x12
 80c:	ab 8b       	std	Y+19, r26	; 0x13
 80e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 810:	20 e0       	ldi	r18, 0x00	; 0
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	40 e8       	ldi	r20, 0x80	; 128
 816:	5f e3       	ldi	r21, 0x3F	; 63
 818:	69 89       	ldd	r22, Y+17	; 0x11
 81a:	7a 89       	ldd	r23, Y+18	; 0x12
 81c:	8b 89       	ldd	r24, Y+19	; 0x13
 81e:	9c 89       	ldd	r25, Y+20	; 0x14
 820:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__cmpsf2>
 824:	88 23       	and	r24, r24
 826:	2c f4       	brge	.+10     	; 0x832 <LCD_displayCharacter+0x366>
		__ticks = 1;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	9e 8b       	std	Y+22, r25	; 0x16
 82e:	8d 8b       	std	Y+21, r24	; 0x15
 830:	3f c0       	rjmp	.+126    	; 0x8b0 <LCD_displayCharacter+0x3e4>
	else if (__tmp > 65535)
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	3f ef       	ldi	r19, 0xFF	; 255
 836:	4f e7       	ldi	r20, 0x7F	; 127
 838:	57 e4       	ldi	r21, 0x47	; 71
 83a:	69 89       	ldd	r22, Y+17	; 0x11
 83c:	7a 89       	ldd	r23, Y+18	; 0x12
 83e:	8b 89       	ldd	r24, Y+19	; 0x13
 840:	9c 89       	ldd	r25, Y+20	; 0x14
 842:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__gesf2>
 846:	18 16       	cp	r1, r24
 848:	4c f5       	brge	.+82     	; 0x89c <LCD_displayCharacter+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 84a:	20 e0       	ldi	r18, 0x00	; 0
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	40 e2       	ldi	r20, 0x20	; 32
 850:	51 e4       	ldi	r21, 0x41	; 65
 852:	6d 85       	ldd	r22, Y+13	; 0x0d
 854:	7e 85       	ldd	r23, Y+14	; 0x0e
 856:	8f 85       	ldd	r24, Y+15	; 0x0f
 858:	98 89       	ldd	r25, Y+16	; 0x10
 85a:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulsf3>
 85e:	dc 01       	movw	r26, r24
 860:	cb 01       	movw	r24, r22
 862:	bc 01       	movw	r22, r24
 864:	cd 01       	movw	r24, r26
 866:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 86a:	dc 01       	movw	r26, r24
 86c:	cb 01       	movw	r24, r22
 86e:	9e 8b       	std	Y+22, r25	; 0x16
 870:	8d 8b       	std	Y+21, r24	; 0x15
 872:	0f c0       	rjmp	.+30     	; 0x892 <LCD_displayCharacter+0x3c6>
 874:	89 e1       	ldi	r24, 0x19	; 25
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	98 8f       	std	Y+24, r25	; 0x18
 87a:	8f 8b       	std	Y+23, r24	; 0x17
 87c:	8f 89       	ldd	r24, Y+23	; 0x17
 87e:	98 8d       	ldd	r25, Y+24	; 0x18
 880:	01 97       	sbiw	r24, 0x01	; 1
 882:	f1 f7       	brne	.-4      	; 0x880 <LCD_displayCharacter+0x3b4>
 884:	98 8f       	std	Y+24, r25	; 0x18
 886:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 888:	8d 89       	ldd	r24, Y+21	; 0x15
 88a:	9e 89       	ldd	r25, Y+22	; 0x16
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	9e 8b       	std	Y+22, r25	; 0x16
 890:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 892:	8d 89       	ldd	r24, Y+21	; 0x15
 894:	9e 89       	ldd	r25, Y+22	; 0x16
 896:	89 2b       	or	r24, r25
 898:	69 f7       	brne	.-38     	; 0x874 <LCD_displayCharacter+0x3a8>

	//delay 1
	_delay_ms(1);
}
 89a:	14 c0       	rjmp	.+40     	; 0x8c4 <LCD_displayCharacter+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 89c:	69 89       	ldd	r22, Y+17	; 0x11
 89e:	7a 89       	ldd	r23, Y+18	; 0x12
 8a0:	8b 89       	ldd	r24, Y+19	; 0x13
 8a2:	9c 89       	ldd	r25, Y+20	; 0x14
 8a4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixunssfsi>
 8a8:	dc 01       	movw	r26, r24
 8aa:	cb 01       	movw	r24, r22
 8ac:	9e 8b       	std	Y+22, r25	; 0x16
 8ae:	8d 8b       	std	Y+21, r24	; 0x15
 8b0:	8d 89       	ldd	r24, Y+21	; 0x15
 8b2:	9e 89       	ldd	r25, Y+22	; 0x16
 8b4:	9a 8f       	std	Y+26, r25	; 0x1a
 8b6:	89 8f       	std	Y+25, r24	; 0x19
 8b8:	89 8d       	ldd	r24, Y+25	; 0x19
 8ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	f1 f7       	brne	.-4      	; 0x8bc <LCD_displayCharacter+0x3f0>
 8c0:	9a 8f       	std	Y+26, r25	; 0x1a
 8c2:	89 8f       	std	Y+25, r24	; 0x19
 8c4:	00 00       	nop
 8c6:	e9 96       	adiw	r28, 0x39	; 57
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	f8 94       	cli
 8cc:	de bf       	out	0x3e, r29	; 62
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	cd bf       	out	0x3d, r28	; 61
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	08 95       	ret

000008d8 <LCD_displayString>:
void LCD_displayString(uint8 *str)
{	for(uint8 i=0 ;str[i]!='\0';i++)
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	00 d0       	rcall	.+0      	; 0x8de <LCD_displayString+0x6>
 8de:	1f 92       	push	r1
 8e0:	cd b7       	in	r28, 0x3d	; 61
 8e2:	de b7       	in	r29, 0x3e	; 62
 8e4:	9b 83       	std	Y+3, r25	; 0x03
 8e6:	8a 83       	std	Y+2, r24	; 0x02
 8e8:	19 82       	std	Y+1, r1	; 0x01
 8ea:	0e c0       	rjmp	.+28     	; 0x908 <LCD_displayString+0x30>
	LCD_displayCharacter( str[i]);
 8ec:	89 81       	ldd	r24, Y+1	; 0x01
 8ee:	88 2f       	mov	r24, r24
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	2a 81       	ldd	r18, Y+2	; 0x02
 8f4:	3b 81       	ldd	r19, Y+3	; 0x03
 8f6:	82 0f       	add	r24, r18
 8f8:	93 1f       	adc	r25, r19
 8fa:	fc 01       	movw	r30, r24
 8fc:	80 81       	ld	r24, Z
 8fe:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCD_displayCharacter>

	//delay 1
	_delay_ms(1);
}
void LCD_displayString(uint8 *str)
{	for(uint8 i=0 ;str[i]!='\0';i++)
 902:	89 81       	ldd	r24, Y+1	; 0x01
 904:	8f 5f       	subi	r24, 0xFF	; 255
 906:	89 83       	std	Y+1, r24	; 0x01
 908:	89 81       	ldd	r24, Y+1	; 0x01
 90a:	88 2f       	mov	r24, r24
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	2a 81       	ldd	r18, Y+2	; 0x02
 910:	3b 81       	ldd	r19, Y+3	; 0x03
 912:	82 0f       	add	r24, r18
 914:	93 1f       	adc	r25, r19
 916:	fc 01       	movw	r30, r24
 918:	80 81       	ld	r24, Z
 91a:	88 23       	and	r24, r24
 91c:	39 f7       	brne	.-50     	; 0x8ec <LCD_displayString+0x14>
	LCD_displayCharacter( str[i]);
}
 91e:	00 00       	nop
 920:	0f 90       	pop	r0
 922:	0f 90       	pop	r0
 924:	0f 90       	pop	r0
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	08 95       	ret

0000092c <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	00 d0       	rcall	.+0      	; 0x932 <LCD_goToRowColumn+0x6>
 932:	1f 92       	push	r1
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	8a 83       	std	Y+2, r24	; 0x02
 93a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
 93c:	8a 81       	ldd	r24, Y+2	; 0x02
 93e:	88 2f       	mov	r24, r24
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	91 05       	cpc	r25, r1
 946:	79 f0       	breq	.+30     	; 0x966 <LCD_goToRowColumn+0x3a>
 948:	82 30       	cpi	r24, 0x02	; 2
 94a:	91 05       	cpc	r25, r1
 94c:	1c f4       	brge	.+6      	; 0x954 <LCD_goToRowColumn+0x28>
 94e:	89 2b       	or	r24, r25
 950:	39 f0       	breq	.+14     	; 0x960 <LCD_goToRowColumn+0x34>
 952:	15 c0       	rjmp	.+42     	; 0x97e <LCD_goToRowColumn+0x52>
 954:	82 30       	cpi	r24, 0x02	; 2
 956:	91 05       	cpc	r25, r1
 958:	51 f0       	breq	.+20     	; 0x96e <LCD_goToRowColumn+0x42>
 95a:	03 97       	sbiw	r24, 0x03	; 3
 95c:	61 f0       	breq	.+24     	; 0x976 <LCD_goToRowColumn+0x4a>
 95e:	0f c0       	rjmp	.+30     	; 0x97e <LCD_goToRowColumn+0x52>
	{
	case 0:
		address=col;
 960:	8b 81       	ldd	r24, Y+3	; 0x03
 962:	89 83       	std	Y+1, r24	; 0x01
		break;
 964:	0c c0       	rjmp	.+24     	; 0x97e <LCD_goToRowColumn+0x52>
	case 1:
		address=0x40+col;
 966:	8b 81       	ldd	r24, Y+3	; 0x03
 968:	80 5c       	subi	r24, 0xC0	; 192
 96a:	89 83       	std	Y+1, r24	; 0x01
		break;
 96c:	08 c0       	rjmp	.+16     	; 0x97e <LCD_goToRowColumn+0x52>
	case 2:
		address=0x10+col;
 96e:	8b 81       	ldd	r24, Y+3	; 0x03
 970:	80 5f       	subi	r24, 0xF0	; 240
 972:	89 83       	std	Y+1, r24	; 0x01
		break;
 974:	04 c0       	rjmp	.+8      	; 0x97e <LCD_goToRowColumn+0x52>
	case 3:
		address=0x50+col;
 976:	8b 81       	ldd	r24, Y+3	; 0x03
 978:	80 5b       	subi	r24, 0xB0	; 176
 97a:	89 83       	std	Y+1, r24	; 0x01
		break;
 97c:	00 00       	nop
		}
	LCD_sendCommand(address|0x80);
 97e:	89 81       	ldd	r24, Y+1	; 0x01
 980:	80 68       	ori	r24, 0x80	; 128
 982:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendCommand>
}
 986:	00 00       	nop
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	0f 90       	pop	r0
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	08 95       	ret

00000994 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col ,uint8 *str)
{
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	00 d0       	rcall	.+0      	; 0x99a <LCD_displayStringRowColumn+0x6>
 99a:	00 d0       	rcall	.+0      	; 0x99c <LCD_displayStringRowColumn+0x8>
 99c:	cd b7       	in	r28, 0x3d	; 61
 99e:	de b7       	in	r29, 0x3e	; 62
 9a0:	89 83       	std	Y+1, r24	; 0x01
 9a2:	6a 83       	std	Y+2, r22	; 0x02
 9a4:	5c 83       	std	Y+4, r21	; 0x04
 9a6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, col);
 9a8:	6a 81       	ldd	r22, Y+2	; 0x02
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_goToRowColumn>
	LCD_displayString(str);
 9b0:	8b 81       	ldd	r24, Y+3	; 0x03
 9b2:	9c 81       	ldd	r25, Y+4	; 0x04
 9b4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_displayString>
}
 9b8:	00 00       	nop
 9ba:	0f 90       	pop	r0
 9bc:	0f 90       	pop	r0
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	08 95       	ret

000009c8 <main>:
 */

#include "lcd.h"

int main(void)
{
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
 9d0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_init>
	// LCD_displayCharacter('A');
	//  LCD_displayString("embedded");



	 LCD_displayStringRowColumn(0,2,"My LCD Driver");
 9d4:	40 e6       	ldi	r20, 0x60	; 96
 9d6:	50 e0       	ldi	r21, 0x00	; 0
 9d8:	62 e0       	ldi	r22, 0x02	; 2
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_displayStringRowColumn>
	 LCD_displayStringRowColumn(1,3,"Embedded WS");
 9e0:	4e e6       	ldi	r20, 0x6E	; 110
 9e2:	50 e0       	ldi	r21, 0x00	; 0
 9e4:	63 e0       	ldi	r22, 0x03	; 3
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_displayStringRowColumn>
	//LCD_intgerToString(53);

    while(1)
    {
		/* Note: we write the code before while(1) because we want to execute it only once */
    }
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <main+0x24>

000009ee <__cmpsf2>:
 9ee:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_cmp>
 9f2:	08 f4       	brcc	.+2      	; 0x9f6 <__cmpsf2+0x8>
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	08 95       	ret

000009f8 <__fixunssfsi>:
 9f8:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_splitA>
 9fc:	88 f0       	brcs	.+34     	; 0xa20 <__fixunssfsi+0x28>
 9fe:	9f 57       	subi	r25, 0x7F	; 127
 a00:	98 f0       	brcs	.+38     	; 0xa28 <__fixunssfsi+0x30>
 a02:	b9 2f       	mov	r27, r25
 a04:	99 27       	eor	r25, r25
 a06:	b7 51       	subi	r27, 0x17	; 23
 a08:	b0 f0       	brcs	.+44     	; 0xa36 <__fixunssfsi+0x3e>
 a0a:	e1 f0       	breq	.+56     	; 0xa44 <__fixunssfsi+0x4c>
 a0c:	66 0f       	add	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	99 1f       	adc	r25, r25
 a14:	1a f0       	brmi	.+6      	; 0xa1c <__fixunssfsi+0x24>
 a16:	ba 95       	dec	r27
 a18:	c9 f7       	brne	.-14     	; 0xa0c <__fixunssfsi+0x14>
 a1a:	14 c0       	rjmp	.+40     	; 0xa44 <__fixunssfsi+0x4c>
 a1c:	b1 30       	cpi	r27, 0x01	; 1
 a1e:	91 f0       	breq	.+36     	; 0xa44 <__fixunssfsi+0x4c>
 a20:	0e 94 71 05 	call	0xae2	; 0xae2 <__fp_zero>
 a24:	b1 e0       	ldi	r27, 0x01	; 1
 a26:	08 95       	ret
 a28:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_zero>
 a2c:	67 2f       	mov	r22, r23
 a2e:	78 2f       	mov	r23, r24
 a30:	88 27       	eor	r24, r24
 a32:	b8 5f       	subi	r27, 0xF8	; 248
 a34:	39 f0       	breq	.+14     	; 0xa44 <__fixunssfsi+0x4c>
 a36:	b9 3f       	cpi	r27, 0xF9	; 249
 a38:	cc f3       	brlt	.-14     	; 0xa2c <__fixunssfsi+0x34>
 a3a:	86 95       	lsr	r24
 a3c:	77 95       	ror	r23
 a3e:	67 95       	ror	r22
 a40:	b3 95       	inc	r27
 a42:	d9 f7       	brne	.-10     	; 0xa3a <__fixunssfsi+0x42>
 a44:	3e f4       	brtc	.+14     	; 0xa54 <__fixunssfsi+0x5c>
 a46:	90 95       	com	r25
 a48:	80 95       	com	r24
 a4a:	70 95       	com	r23
 a4c:	61 95       	neg	r22
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	08 95       	ret

00000a56 <__fp_cmp>:
 a56:	99 0f       	add	r25, r25
 a58:	00 08       	sbc	r0, r0
 a5a:	55 0f       	add	r21, r21
 a5c:	aa 0b       	sbc	r26, r26
 a5e:	e0 e8       	ldi	r30, 0x80	; 128
 a60:	fe ef       	ldi	r31, 0xFE	; 254
 a62:	16 16       	cp	r1, r22
 a64:	17 06       	cpc	r1, r23
 a66:	e8 07       	cpc	r30, r24
 a68:	f9 07       	cpc	r31, r25
 a6a:	c0 f0       	brcs	.+48     	; 0xa9c <__fp_cmp+0x46>
 a6c:	12 16       	cp	r1, r18
 a6e:	13 06       	cpc	r1, r19
 a70:	e4 07       	cpc	r30, r20
 a72:	f5 07       	cpc	r31, r21
 a74:	98 f0       	brcs	.+38     	; 0xa9c <__fp_cmp+0x46>
 a76:	62 1b       	sub	r22, r18
 a78:	73 0b       	sbc	r23, r19
 a7a:	84 0b       	sbc	r24, r20
 a7c:	95 0b       	sbc	r25, r21
 a7e:	39 f4       	brne	.+14     	; 0xa8e <__fp_cmp+0x38>
 a80:	0a 26       	eor	r0, r26
 a82:	61 f0       	breq	.+24     	; 0xa9c <__fp_cmp+0x46>
 a84:	23 2b       	or	r18, r19
 a86:	24 2b       	or	r18, r20
 a88:	25 2b       	or	r18, r21
 a8a:	21 f4       	brne	.+8      	; 0xa94 <__fp_cmp+0x3e>
 a8c:	08 95       	ret
 a8e:	0a 26       	eor	r0, r26
 a90:	09 f4       	brne	.+2      	; 0xa94 <__fp_cmp+0x3e>
 a92:	a1 40       	sbci	r26, 0x01	; 1
 a94:	a6 95       	lsr	r26
 a96:	8f ef       	ldi	r24, 0xFF	; 255
 a98:	81 1d       	adc	r24, r1
 a9a:	81 1d       	adc	r24, r1
 a9c:	08 95       	ret

00000a9e <__fp_split3>:
 a9e:	57 fd       	sbrc	r21, 7
 aa0:	90 58       	subi	r25, 0x80	; 128
 aa2:	44 0f       	add	r20, r20
 aa4:	55 1f       	adc	r21, r21
 aa6:	59 f0       	breq	.+22     	; 0xabe <__fp_splitA+0x10>
 aa8:	5f 3f       	cpi	r21, 0xFF	; 255
 aaa:	71 f0       	breq	.+28     	; 0xac8 <__fp_splitA+0x1a>
 aac:	47 95       	ror	r20

00000aae <__fp_splitA>:
 aae:	88 0f       	add	r24, r24
 ab0:	97 fb       	bst	r25, 7
 ab2:	99 1f       	adc	r25, r25
 ab4:	61 f0       	breq	.+24     	; 0xace <__fp_splitA+0x20>
 ab6:	9f 3f       	cpi	r25, 0xFF	; 255
 ab8:	79 f0       	breq	.+30     	; 0xad8 <__fp_splitA+0x2a>
 aba:	87 95       	ror	r24
 abc:	08 95       	ret
 abe:	12 16       	cp	r1, r18
 ac0:	13 06       	cpc	r1, r19
 ac2:	14 06       	cpc	r1, r20
 ac4:	55 1f       	adc	r21, r21
 ac6:	f2 cf       	rjmp	.-28     	; 0xaac <__fp_split3+0xe>
 ac8:	46 95       	lsr	r20
 aca:	f1 df       	rcall	.-30     	; 0xaae <__fp_splitA>
 acc:	08 c0       	rjmp	.+16     	; 0xade <__fp_splitA+0x30>
 ace:	16 16       	cp	r1, r22
 ad0:	17 06       	cpc	r1, r23
 ad2:	18 06       	cpc	r1, r24
 ad4:	99 1f       	adc	r25, r25
 ad6:	f1 cf       	rjmp	.-30     	; 0xaba <__fp_splitA+0xc>
 ad8:	86 95       	lsr	r24
 ada:	71 05       	cpc	r23, r1
 adc:	61 05       	cpc	r22, r1
 ade:	08 94       	sec
 ae0:	08 95       	ret

00000ae2 <__fp_zero>:
 ae2:	e8 94       	clt

00000ae4 <__fp_szero>:
 ae4:	bb 27       	eor	r27, r27
 ae6:	66 27       	eor	r22, r22
 ae8:	77 27       	eor	r23, r23
 aea:	cb 01       	movw	r24, r22
 aec:	97 f9       	bld	r25, 7
 aee:	08 95       	ret

00000af0 <__gesf2>:
 af0:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_cmp>
 af4:	08 f4       	brcc	.+2      	; 0xaf8 <__gesf2+0x8>
 af6:	8f ef       	ldi	r24, 0xFF	; 255
 af8:	08 95       	ret

00000afa <__mulsf3>:
 afa:	0e 94 90 05 	call	0xb20	; 0xb20 <__mulsf3x>
 afe:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_round>
 b02:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fp_pscA>
 b06:	38 f0       	brcs	.+14     	; 0xb16 <__mulsf3+0x1c>
 b08:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fp_pscB>
 b0c:	20 f0       	brcs	.+8      	; 0xb16 <__mulsf3+0x1c>
 b0e:	95 23       	and	r25, r21
 b10:	11 f0       	breq	.+4      	; 0xb16 <__mulsf3+0x1c>
 b12:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_inf>
 b16:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_nan>
 b1a:	11 24       	eor	r1, r1
 b1c:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_szero>

00000b20 <__mulsf3x>:
 b20:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_split3>
 b24:	70 f3       	brcs	.-36     	; 0xb02 <__mulsf3+0x8>

00000b26 <__mulsf3_pse>:
 b26:	95 9f       	mul	r25, r21
 b28:	c1 f3       	breq	.-16     	; 0xb1a <__mulsf3+0x20>
 b2a:	95 0f       	add	r25, r21
 b2c:	50 e0       	ldi	r21, 0x00	; 0
 b2e:	55 1f       	adc	r21, r21
 b30:	62 9f       	mul	r22, r18
 b32:	f0 01       	movw	r30, r0
 b34:	72 9f       	mul	r23, r18
 b36:	bb 27       	eor	r27, r27
 b38:	f0 0d       	add	r31, r0
 b3a:	b1 1d       	adc	r27, r1
 b3c:	63 9f       	mul	r22, r19
 b3e:	aa 27       	eor	r26, r26
 b40:	f0 0d       	add	r31, r0
 b42:	b1 1d       	adc	r27, r1
 b44:	aa 1f       	adc	r26, r26
 b46:	64 9f       	mul	r22, r20
 b48:	66 27       	eor	r22, r22
 b4a:	b0 0d       	add	r27, r0
 b4c:	a1 1d       	adc	r26, r1
 b4e:	66 1f       	adc	r22, r22
 b50:	82 9f       	mul	r24, r18
 b52:	22 27       	eor	r18, r18
 b54:	b0 0d       	add	r27, r0
 b56:	a1 1d       	adc	r26, r1
 b58:	62 1f       	adc	r22, r18
 b5a:	73 9f       	mul	r23, r19
 b5c:	b0 0d       	add	r27, r0
 b5e:	a1 1d       	adc	r26, r1
 b60:	62 1f       	adc	r22, r18
 b62:	83 9f       	mul	r24, r19
 b64:	a0 0d       	add	r26, r0
 b66:	61 1d       	adc	r22, r1
 b68:	22 1f       	adc	r18, r18
 b6a:	74 9f       	mul	r23, r20
 b6c:	33 27       	eor	r19, r19
 b6e:	a0 0d       	add	r26, r0
 b70:	61 1d       	adc	r22, r1
 b72:	23 1f       	adc	r18, r19
 b74:	84 9f       	mul	r24, r20
 b76:	60 0d       	add	r22, r0
 b78:	21 1d       	adc	r18, r1
 b7a:	82 2f       	mov	r24, r18
 b7c:	76 2f       	mov	r23, r22
 b7e:	6a 2f       	mov	r22, r26
 b80:	11 24       	eor	r1, r1
 b82:	9f 57       	subi	r25, 0x7F	; 127
 b84:	50 40       	sbci	r21, 0x00	; 0
 b86:	9a f0       	brmi	.+38     	; 0xbae <__mulsf3_pse+0x88>
 b88:	f1 f0       	breq	.+60     	; 0xbc6 <__mulsf3_pse+0xa0>
 b8a:	88 23       	and	r24, r24
 b8c:	4a f0       	brmi	.+18     	; 0xba0 <__mulsf3_pse+0x7a>
 b8e:	ee 0f       	add	r30, r30
 b90:	ff 1f       	adc	r31, r31
 b92:	bb 1f       	adc	r27, r27
 b94:	66 1f       	adc	r22, r22
 b96:	77 1f       	adc	r23, r23
 b98:	88 1f       	adc	r24, r24
 b9a:	91 50       	subi	r25, 0x01	; 1
 b9c:	50 40       	sbci	r21, 0x00	; 0
 b9e:	a9 f7       	brne	.-22     	; 0xb8a <__mulsf3_pse+0x64>
 ba0:	9e 3f       	cpi	r25, 0xFE	; 254
 ba2:	51 05       	cpc	r21, r1
 ba4:	80 f0       	brcs	.+32     	; 0xbc6 <__mulsf3_pse+0xa0>
 ba6:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_inf>
 baa:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_szero>
 bae:	5f 3f       	cpi	r21, 0xFF	; 255
 bb0:	e4 f3       	brlt	.-8      	; 0xbaa <__mulsf3_pse+0x84>
 bb2:	98 3e       	cpi	r25, 0xE8	; 232
 bb4:	d4 f3       	brlt	.-12     	; 0xbaa <__mulsf3_pse+0x84>
 bb6:	86 95       	lsr	r24
 bb8:	77 95       	ror	r23
 bba:	67 95       	ror	r22
 bbc:	b7 95       	ror	r27
 bbe:	f7 95       	ror	r31
 bc0:	e7 95       	ror	r30
 bc2:	9f 5f       	subi	r25, 0xFF	; 255
 bc4:	c1 f7       	brne	.-16     	; 0xbb6 <__mulsf3_pse+0x90>
 bc6:	fe 2b       	or	r31, r30
 bc8:	88 0f       	add	r24, r24
 bca:	91 1d       	adc	r25, r1
 bcc:	96 95       	lsr	r25
 bce:	87 95       	ror	r24
 bd0:	97 f9       	bld	r25, 7
 bd2:	08 95       	ret

00000bd4 <__fp_inf>:
 bd4:	97 f9       	bld	r25, 7
 bd6:	9f 67       	ori	r25, 0x7F	; 127
 bd8:	80 e8       	ldi	r24, 0x80	; 128
 bda:	70 e0       	ldi	r23, 0x00	; 0
 bdc:	60 e0       	ldi	r22, 0x00	; 0
 bde:	08 95       	ret

00000be0 <__fp_nan>:
 be0:	9f ef       	ldi	r25, 0xFF	; 255
 be2:	80 ec       	ldi	r24, 0xC0	; 192
 be4:	08 95       	ret

00000be6 <__fp_pscA>:
 be6:	00 24       	eor	r0, r0
 be8:	0a 94       	dec	r0
 bea:	16 16       	cp	r1, r22
 bec:	17 06       	cpc	r1, r23
 bee:	18 06       	cpc	r1, r24
 bf0:	09 06       	cpc	r0, r25
 bf2:	08 95       	ret

00000bf4 <__fp_pscB>:
 bf4:	00 24       	eor	r0, r0
 bf6:	0a 94       	dec	r0
 bf8:	12 16       	cp	r1, r18
 bfa:	13 06       	cpc	r1, r19
 bfc:	14 06       	cpc	r1, r20
 bfe:	05 06       	cpc	r0, r21
 c00:	08 95       	ret

00000c02 <__fp_round>:
 c02:	09 2e       	mov	r0, r25
 c04:	03 94       	inc	r0
 c06:	00 0c       	add	r0, r0
 c08:	11 f4       	brne	.+4      	; 0xc0e <__fp_round+0xc>
 c0a:	88 23       	and	r24, r24
 c0c:	52 f0       	brmi	.+20     	; 0xc22 <__fp_round+0x20>
 c0e:	bb 0f       	add	r27, r27
 c10:	40 f4       	brcc	.+16     	; 0xc22 <__fp_round+0x20>
 c12:	bf 2b       	or	r27, r31
 c14:	11 f4       	brne	.+4      	; 0xc1a <__fp_round+0x18>
 c16:	60 ff       	sbrs	r22, 0
 c18:	04 c0       	rjmp	.+8      	; 0xc22 <__fp_round+0x20>
 c1a:	6f 5f       	subi	r22, 0xFF	; 255
 c1c:	7f 4f       	sbci	r23, 0xFF	; 255
 c1e:	8f 4f       	sbci	r24, 0xFF	; 255
 c20:	9f 4f       	sbci	r25, 0xFF	; 255
 c22:	08 95       	ret

00000c24 <_exit>:
 c24:	f8 94       	cli

00000c26 <__stop_program>:
 c26:	ff cf       	rjmp	.-2      	; 0xc26 <__stop_program>
